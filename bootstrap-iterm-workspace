#!/usr/bin/env osascript -l JavaScript
ObjC.import('Foundation');

function bootstrap(session, command, split) {
  if (command instanceof Array) {
    let sessions = [session]
    for (let i = 1; i < command.length; ++i) {
      sessions.push(session[`${split}WithSameProfile`]())
    }
    const nextSplit =
      split === "splitVertically" ? "splitHorizontally" : "splitVertically"
    for (let i = 0; i < command.length; ++i) {
      bootstrap(sessions[i], command[i], nextSplit)
    }
  } else if (command) {
    session.write({ text: command })
  }
}

function tabConfiguration({ tabs }) {
  const wrapWith = cd => cmd =>
    cmd instanceof Array ? cmd.map(wrapWith(cd)) : cmd ? `${cd} && ${cmd}` : cd

  return tabs.map(({ cd, commands, firstSplit }) => ({
    firstSplit: firstSplit || "splitHorizontally",
    commands: cd ? commands.map(wrapWith(cd)) : commands,
  }))
}

function main(config) {
  const terminal = Application("iTerm")
  terminal.includeStandardAdditions = true

  const window = terminal.currentWindow()
  let tabs = [window.currentTab()]

  const tabConfig = tabConfiguration(config)

  for (let i = 0; i < tabConfig.length; ++i) {
    if (i !== 0) {
      tabs.push(window.createTabWithDefaultProfile())
    }
    const { commands, firstSplit } = tabConfig[i]
    bootstrap(tabs[i].currentSession(), commands, firstSplit)
  }

  tabs[0].select()
}

function getFileContents(path) {
  const fm = $.NSFileManager.defaultManager;
  let contents = fm.contentsAtPath(path); // NSData
  contents = $.NSString.alloc.initWithDataEncoding(contents, $.NSUTF8StringEncoding).js || "[]";

  return ObjC.unwrap(contents);
}

function run(argv) {
  var fm = $.NSFileManager.defaultManager;
  const contents = getFileContents(argv[0]);

  const config = JSON.parse(contents)

  main(config)
}
